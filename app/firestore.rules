rules_version = '2';
service cloud.firestore {
match /databases/{database}/documents {
// Helper functions
function isAuthenticated() {
  return request.auth != null;
}

function isOwner(userId) {
  return isAuthenticated() && request.auth.uid == userId;
}

// Basic validators
function isStringField(v) { return v is string; }
function isNumberField(v) { return v is number; }
function isBooleanField(v) { return v is bool; }
function isISODate(v) { return v is string && v.matches('^\\d{4}-\\d{2}-\\d{2}$'); }

// Chat sessions
match /chat_sessions/{sessionId} {
  allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
  allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
  allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
  allow delete: if false;
  
  match /messages/{messageId} {
    allow read: if isAuthenticated() && get(/databases/$(database)/documents/chat_sessions/$(sessionId)).data.userId == request.auth.uid;
    allow write: if false;
  }
}

// Chat rate limits
match /chat_rate_limits/{userId} {
  allow read: if isOwner(userId);
  allow write: if false;
}

// Chat context cache
match /chat_context_cache/{userId} {
  allow read: if isOwner(userId);
  allow write: if false;
}

// Chat analytics
match /chat_analytics/{date} {
  allow read: if false;
  allow write: if false;
}

// Users
match /users/{document} {
  allow read: if isAuthenticated();
  allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
  allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
  allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
}

// User Food Entries
match /userFoodEntries/{entryId} {
  allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
  allow create: if isAuthenticated()
                && request.resource.data.userId == request.auth.uid
                && isISODate(request.resource.data.date)
                && isStringField(request.resource.data.name)
                && isNumberField(request.resource.data.calories)
                && request.resource.data.calories >= 0
                && isNumberField(request.resource.data.quantity)
                && request.resource.data.quantity > 0;
  allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
}

// Food Database
match /foodDatabase/{foodId} {
  allow read: if isAuthenticated();
  // Cualquier usuario autenticado puede crear (se usa para alta de alimentos propios o importados)
  allow create: if isAuthenticated()
                && isStringField(request.resource.data.name)
                && isNumberField(request.resource.data.calories)
                && request.resource.data.calories >= 0;
  // Permitimos update a autenticados (incrementUsage y edits menores). Opcionalmente podrías restringir a owner.
  allow update: if isAuthenticated();
  allow delete: if false;
}

// Workouts
match /workouts/{workoutId} {
  allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
  allow create: if isAuthenticated()
                && request.resource.data.userId == request.auth.uid
                && isStringField(request.resource.data.name)
                && isBooleanField(request.resource.data.isActive);
  allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
}

// Workout Templates
match /workout_templates/{templateId} {
  allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
  allow create: if isAuthenticated()
                && request.resource.data.userId == request.auth.uid
                && isStringField(request.resource.data.name);
  allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
}

// Regla para insights personales del usuario
match /user_insights/{userId} {
  // Solo el usuario puede leer sus propios insights
  allow read: if request.auth != null && request.auth.uid == userId;
  
  // Solo el usuario puede escribir sus propios insights
  allow write: if request.auth != null && request.auth.uid == userId;
}

// Mensajes proactivos de Apolo (resúmenes/semanales)
match /chat_apolo/{docId} {
  // Solo lectura por el dueño; escritura la realiza Cloud Functions con Admin SDK (omite reglas)
  allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
  allow write: if false;
}

// Registros de peso del usuario
match /registros_peso/{registroId} {
  allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
  allow create: if isAuthenticated()
                && request.resource.data.userId == request.auth.uid
                && isNumberField(request.resource.data.peso)
                && request.resource.data.peso >= 30
                && request.resource.data.peso <= 300
                && isISODate(request.resource.data.fecha);
  allow update: if isAuthenticated()
                && resource.data.userId == request.auth.uid
                && isNumberField(request.resource.data.peso)
                && request.resource.data.peso >= 30
                && request.resource.data.peso <= 300
                && isISODate(request.resource.data.fecha);
  allow delete: if false;
}

// Denegar todo lo demás
match /{document=**} {
  allow read, write: if false;
}
}
}
